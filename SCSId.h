#ifndef __SCS_ID_H
#define __SCS_ID_H

#include <string>
#include <vector>

using namespace std;

//本编码适用于数字+不多于4个字符（ASCII/中文）的编码，例如身份证号、驾驶证号等证件号码、ID类型数据

/*
编码规则如下：
1、采用4bit编码
2、0000不用，防止两个连续字符编码成0000 0000，被误当了字符串结束符
3、1111特殊用途，对于奇数个字符，编码后的末4位用1111填充
4、0001-1010用于表示数字0-9
5、1011-1110用于编码0-9之外的其他4个字符
*/
class CSCSId
{
public:
	//除了0-9数字外，其他需要编码的字符，应不多于4个字符
	CSCSId(const string &strOtherChar);
	virtual ~CSCSId();

	/************************************************************************************
	功能：	编码
	参数：	pSrc - 待编码的字符串
			nSrcLen - 待编码的字符串长度
			pDst - 编码后的数据缓冲区
			nDstLen - 编码后的数据缓冲区长度。编码成功后，会更新为编码后的字符实际长度。
	返回值：0，成功
			-1，pDst缓冲区长度不够
	注意：	1、pDst的大小应至少为pSrc大小+1。当待编码的字符不适合使用本编码时，会将原始字符copy到pDst，
			且在前面增加一个0xFF的标志
			2、不会自动在pDst末尾补'\0'
	************************************************************************************/
	int Encode(const char *pSrc, int nSrcLen, char *pDst, int &nDstLen);

	/************************************************************************************
	功能：	解码
	参数：	pSrc - 待解码的字符串
			nSrcLen - 待解码的字符串长度
			pDst - 解码后的数据缓冲区
			nDstLen - 解码后的数据缓冲区长度
	返回值：0，成功
			-1，pDst缓冲区长度不够
	注意：	1、pDst的大小应至少为pSrc大小*2
			2、不会自动在pDst末尾补'\0'
	************************************************************************************/
	int Decode(const char *pSrc, int nSrcLen, char *pDst, int &nDstLen);

private:
	vector<string> m_vecOtherCodes;	//0-9数字外，其他需要编码的字符
};

#endif